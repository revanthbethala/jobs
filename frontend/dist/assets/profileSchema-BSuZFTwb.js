import{o as a,s as e,Y as t,S as r,V as s}from"./index-B6peOCw_.js";const n=new Date().getFullYear(),u=a({username:e().min(1,"Username is required"),collegeId:e().min(1,"College ID is required"),email:e().email("Invalid email address"),gender:e().min(1,"Gender is required"),firstName:e().min(1,"First name is required"),lastName:e().min(1,"Last name is required"),dateOfBirth:e().min(1,"Date of birth is required"),phoneNumber:e().min(10,"Phone number must be at least 10 digits"),address:e().min(1,"Address is required"),fatherName:e().min(1,"Father's name is required"),motherName:e().min(1,"Mother's name is required"),city:e().min(1,"City is required"),state:e().min(1,"State is required"),country:e().min(1,"Country is required")}),m=a({id:e(),educationalLevel:e().min(1,"Educational level is required"),institution:e().min(1,"Institution is required"),specialization:e(),boardOrUniversity:e().min(1,"Board/University is required"),percentage:r({invalid_type_error:"Percentage must be a number"}).int().min(0,"Percentage must be positive").max(100,"Percentage cannot exceed 100"),passedOutYear:r({invalid_type_error:"Year must be a number"}).int().min(1900,"Invalid year").max(n+5,`Year cannot be more than ${n+5}`),location:e().min(1,"Location is required"),noOfActiveBacklogs:r({invalid_type_error:"Backlogs must be a number"}).int().min(0,"Backlogs cannot be negative")}),d=s(m).min(1,"At least one education entry is required"),l=a({resume:t(File).refine(i=>i.type==="application/pdf","Resume must be a PDF file").refine(i=>i.size<=1*1024*1024,"Resume must be less than 1MB").optional().nullable()});t(File).refine(i=>i.type.startsWith("image/"),"Profile picture must be an image").refine(i=>i.size<=150*1024,"Profile picture must be less than 150KB").optional();export{d as e,u as p,l as r};
